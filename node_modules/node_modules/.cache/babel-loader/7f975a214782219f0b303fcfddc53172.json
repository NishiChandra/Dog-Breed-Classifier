{"ast":null,"code":"var _jsxFileName = \"F:\\\\React\\\\dog-classifier\\\\src\\\\App.js\";\nimport React, { useReducer, useState } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nconst stateMachine = {\n  initial: 'initial',\n  states: {\n    initial: {\n      on: {\n        next: 'loadingModel'\n      }\n    },\n    loadingModel: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    },\n    awaitingUpload: {\n      on: {\n        next: 'ready'\n      }\n    },\n    ready: {\n      on: {\n        next: 'classifying'\n      }\n    },\n    classifying: {\n      on: {\n        next: 'complete'\n      }\n    },\n    complete: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    }\n  }\n};\n\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, stateMachine.initial);\n  const [model, setModel] = useState(null);\n\n  const next = () => dispatch('next');\n\n  const loadModel = async () => {\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n  };\n\n  const buttonProps = {\n    initial: {\n      text: 'Load Model',\n      actions: loadModel\n    },\n    loadingModel: {\n      text: 'Loading Model...',\n      actions: () => {}\n    },\n    awaitingUpload: {\n      text: 'Upload Photo',\n      actions: () => {}\n    },\n    ready: {\n      text: 'Identifier',\n      actions: () => {}\n    },\n    classifying: {\n      text: 'Identifying',\n      actions: () => {}\n    },\n    complete: {\n      text: 'Reset',\n      actions: () => {}\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: buttonProps[state].action,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \" \", buttonProps[state].text));\n}\n\nexport default App;","map":{"version":3,"sources":["F:/React/dog-classifier/src/App.js"],"names":["React","useReducer","useState","mobilenet","stateMachine","initial","states","on","next","loadingModel","awaitingUpload","ready","classifying","complete","reducer","currentState","event","App","state","dispatch","model","setModel","loadModel","mobilenetModel","load","buttonProps","text","actions","action"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,SADU;AAEnBC,EAAAA,MAAM,EAAG;AACTD,IAAAA,OAAO,EAAG;AAAEE,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAG;AAAR;AAAP,KADD;AAETC,IAAAA,YAAY,EAAE;AAAEF,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KAFL;AAGTE,IAAAA,cAAc,EAAC;AAAEH,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KAHN;AAITG,IAAAA,KAAK,EAAG;AAAEJ,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KAJC;AAKTI,IAAAA,WAAW,EAAE;AAAEL,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KALJ;AAMTK,IAAAA,QAAQ,EAAG;AAAEN,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP;AANF;AAFU,CAArB;;AAWA,MAAMM,OAAO,GAAG,CAACC,YAAD,EAAeC,KAAf,KAAyBZ,YAAY,CAACE,MAAb,CAAoBS,YAApB,EAAkCR,EAAlC,CAAqCS,KAArC,KAA+CZ,YAAY,CAACC,OAArG;;AAEA,SAASY,GAAT,GAAe;AACb,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBlB,UAAU,CAACa,OAAD,EAASV,YAAY,CAACC,OAAtB,CAAnC;AACA,QAAM,CAACe,KAAD,EAAOC,QAAP,IAAmBnB,QAAQ,CAAC,IAAD,CAAjC;;AACA,QAAMM,IAAI,GAAG,MAAMW,QAAQ,CAAC,MAAD,CAA3B;;AAGA,QAAMG,SAAS,GAAG,YAAY;AAC5Bd,IAAAA,IAAI;AACJ,UAAMe,cAAc,GAAG,MAAMpB,SAAS,CAACqB,IAAV,EAA7B;AACAH,IAAAA,QAAQ,CAACE,cAAD,CAAR;AACAf,IAAAA,IAAI;AAEL,GAND;;AAOA,QAAMiB,WAAW,GAAG;AAClBpB,IAAAA,OAAO,EAAG;AAAEqB,MAAAA,IAAI,EAAG,YAAT;AAAuBC,MAAAA,OAAO,EAAEL;AAAhC,KADQ;AAElBb,IAAAA,YAAY,EAAG;AAAEiB,MAAAA,IAAI,EAAG,kBAAT;AAA6BC,MAAAA,OAAO,EAAE,MAAM,CAAE;AAA9C,KAFG;AAGlBjB,IAAAA,cAAc,EAAG;AAAGgB,MAAAA,IAAI,EAAG,cAAV;AAA0BC,MAAAA,OAAO,EAAE,MAAM,CAAE;AAA3C,KAHC;AAIlBhB,IAAAA,KAAK,EAAG;AAAGe,MAAAA,IAAI,EAAG,YAAV;AAAwBC,MAAAA,OAAO,EAAE,MAAM,CAAE;AAAzC,KAJU;AAKlBf,IAAAA,WAAW,EAAG;AAAGc,MAAAA,IAAI,EAAG,aAAV;AAAyBC,MAAAA,OAAO,EAAE,MAAM,CAAE;AAA1C,KALI;AAMlBd,IAAAA,QAAQ,EAAG;AAAGa,MAAAA,IAAI,EAAG,OAAV;AAAmBC,MAAAA,OAAO,EAAE,MAAM,CAAE;AAApC;AANO,GAApB;AAQA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEF,WAAW,CAACP,KAAD,CAAX,CAAmBU,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA8CH,WAAW,CAACP,KAAD,CAAX,CAAmBQ,IAAjE,CADF,CADF;AAKD;;AAED,eAAeT,GAAf","sourcesContent":["import React, { useReducer,useState } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nconst stateMachine = {\n  initial :'initial',\n  states : { \n  initial : { on : {next : 'loadingModel'}},\n  loadingModel: { on : {next: 'awaitingUpload'}},\n  awaitingUpload:{ on : {next: 'ready'}},\n  ready : { on : {next: 'classifying'}},\n  classifying: { on : {next: 'complete'}},\n  complete : { on : {next: 'awaitingUpload'}}\n}\n}\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nfunction App() {\n  const [state,dispatch] = useReducer(reducer,stateMachine.initial);\n  const [model,setModel] = useState(null);\n  const next = () => dispatch('next')\n\n  \n  const loadModel = async () => {\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n\n  }\n  const buttonProps = {\n    initial : { text : 'Load Model', actions: loadModel },\n    loadingModel : { text : 'Loading Model...', actions: () => {}},\n    awaitingUpload : {  text : 'Upload Photo', actions: () => {}},\n    ready : {  text : 'Identifier', actions: () => {}},\n    classifying : {  text : 'Identifying', actions: () => {}},\n    complete : {  text : 'Reset', actions: () => {}}\n  }\n  return (\n    <div>\n      <button onClick={buttonProps[state].action}> {buttonProps[state].text}</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}