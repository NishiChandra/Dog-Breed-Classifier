{"ast":null,"code":"var _jsxFileName = \"F:\\\\React\\\\dog-classifier\\\\src\\\\App.js\";\nimport * as tf from '@tensorflow/tfjs';\nimport React, { useReducer, useState, useRef } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nconst stateMachine = {\n  initial: 'initial',\n  states: {\n    initial: {\n      on: {\n        next: 'loadingModel'\n      }\n    },\n    loadingModel: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    },\n    awaitingUpload: {\n      on: {\n        next: 'ready'\n      }\n    },\n    ready: {\n      on: {\n        next: 'classifying'\n      }\n    },\n    classifying: {\n      on: {\n        next: 'complete'\n      }\n    },\n    complete: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    }\n  }\n};\n\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nfunction App() {\n  tf.setBackend(\"cpu\");\n  const [state, dispatch] = useReducer(reducer, stateMachine.initial);\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageUrl] = useState(null);\n  const [results, setResults] = useState([]);\n  const inputRef = useRef();\n  const imageRef = useRef();\n\n  const next = () => dispatch('next');\n\n  const loadModel = async () => {\n    console.log(\"model loaded\");\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n  };\n\n  const handleUpload = e => {\n    console.log(\"running\");\n    const {\n      files\n    } = e.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageUrl(url);\n      next();\n    }\n  };\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    console.log({\n      results\n    });\n    /**setResults(results)**/\n\n    next();\n  };\n\n  const buttonProps = {\n    initial: {\n      text: 'Load Model',\n      action: loadModel\n    },\n    loadingModel: {\n      text: 'Loading Model...',\n      action: () => {}\n    },\n    awaitingUpload: {\n      text: 'Upload Photo',\n      action: () => inputRef.current.click()\n    },\n    ready: {\n      text: 'Identifier',\n      action: identify\n    },\n    classifying: {\n      text: 'Identifying',\n      action: () => {}\n    },\n    complete: {\n      text: 'Reset',\n      action: () => {}\n    }\n  };\n  const {\n    showImage = false\n  } = stateMachine.states[state];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, showImage && /*#__PURE__*/React.createElement(\"img\", {\n    src: imageURL,\n    alt: \"upload-preview\",\n    ref: imageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    capture: \"camera\",\n    onChange: handleUpload,\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: buttonProps[state].action,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \" \", buttonProps[state].text));\n}\n\nexport default App;","map":{"version":3,"sources":["F:/React/dog-classifier/src/App.js"],"names":["tf","React","useReducer","useState","useRef","mobilenet","stateMachine","initial","states","on","next","loadingModel","awaitingUpload","ready","classifying","complete","reducer","currentState","event","App","setBackend","state","dispatch","model","setModel","imageURL","setImageUrl","results","setResults","inputRef","imageRef","loadModel","console","log","mobilenetModel","load","handleUpload","e","files","target","length","url","URL","createObjectURL","identify","classify","current","buttonProps","text","action","click","showImage"],"mappings":"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","sourcesContent":["import * as tf from '@tensorflow/tfjs';\nimport React, { useReducer,useState, useRef } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nconst stateMachine = {\n  initial :'initial',\n  states : { \n  initial : { on : {next : 'loadingModel'}},\n  loadingModel: { on : {next: 'awaitingUpload'}},\n  awaitingUpload:{ on : {next: 'ready'}},\n  ready : { on : {next: 'classifying'}},\n  classifying: { on : {next: 'complete'}},\n  complete : { on : {next: 'awaitingUpload'}}\n}\n}\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nfunction App() {\n  tf.setBackend(\"cpu\");\n  const [state,dispatch] = useReducer(reducer,stateMachine.initial);\n  const [model,setModel] = useState(null);\n  const [imageURL,setImageUrl] = useState(null);\n  const [results,setResults] = useState([]);\n  const inputRef = useRef();\n  const imageRef = useRef();\n\n  const next = () => dispatch('next')\n\n  \n  const loadModel = async () => {\n    console.log(\"model loaded\")\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n\n  }\n  const handleUpload = e => {\n    console.log(\"running\")\n    const { files } = e.target;\n    if (files.length > 0){\n      const url = URL.createObjectURL(files[0]);\n      setImageUrl(url);\n      next();\n    }\n  }\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    console.log({results})\n    /**setResults(results)**/\n    next();\n  }\n  const buttonProps = {\n    initial : { text : 'Load Model', action: loadModel },\n    loadingModel : { text : 'Loading Model...', action: () => {} },\n    awaitingUpload : {  text : 'Upload Photo', action: () => inputRef.current.click()},\n    ready : {  text : 'Identifier', action: identify},\n    classifying : {  text : 'Identifying', action: () => {}},\n    complete : {  text : 'Reset', action: () => {}}\n  }\n\n  const { showImage = false } = stateMachine.states[state];\n  return (\n    <div>\n      {showImage && <img  src={imageURL} alt=\"upload-preview\" ref={imageRef} /> }\n      <input type=\"file\" accept=\"image/*\" capture=\"camera\" onChange={handleUpload} ref={inputRef} />\n      <button onClick={buttonProps[state].action}> {buttonProps[state].text}</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}