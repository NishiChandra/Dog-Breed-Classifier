{"ast":null,"code":"var _jsxFileName = \"F:\\\\React\\\\dog-classifier\\\\src\\\\App.js\";\nimport React, { useReducer } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nconst stateMachine = {\n  initial: 'initial',\n  states: {\n    initial: {\n      on: {\n        next: 'loadingModel'\n      }\n    },\n    loadingModel: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    },\n    awaitingUpload: {\n      on: {\n        next: 'ready'\n      }\n    },\n    ready: {\n      on: {\n        next: 'classifying'\n      }\n    },\n    classifying: {\n      on: {\n        next: 'complete'\n      }\n    },\n    complete: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    }\n  }\n};\n\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, stateMachine.initial);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, \"Dog classifier app\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch('next'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, state));\n}\n\nexport default App;","map":{"version":3,"sources":["F:/React/dog-classifier/src/App.js"],"names":["React","useReducer","mobilenet","stateMachine","initial","states","on","next","loadingModel","awaitingUpload","ready","classifying","complete","reducer","currentState","event","App","state","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,SADU;AAEnBC,EAAAA,MAAM,EAAG;AACTD,IAAAA,OAAO,EAAG;AAAEE,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAG;AAAR;AAAP,KADD;AAETC,IAAAA,YAAY,EAAE;AAAEF,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KAFL;AAGTE,IAAAA,cAAc,EAAC;AAAEH,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KAHN;AAITG,IAAAA,KAAK,EAAG;AAAEJ,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KAJC;AAKTI,IAAAA,WAAW,EAAE;AAAEL,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KALJ;AAMTK,IAAAA,QAAQ,EAAG;AAAEN,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP;AANF;AAFU,CAArB;;AAWA,MAAMM,OAAO,GAAG,CAACC,YAAD,EAAeC,KAAf,KAAyBZ,YAAY,CAACE,MAAb,CAAoBS,YAApB,EAAkCR,EAAlC,CAAqCS,KAArC,KAA+CZ,YAAY,CAACC,OAArG;;AAEA,SAASY,GAAT,GAAe;AACb,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBjB,UAAU,CAACY,OAAD,EAASV,YAAY,CAACC,OAAtB,CAAnC;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAEE;AAAQ,IAAA,OAAO,EAAE,MAAMc,QAAQ,CAAC,MAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0CD,KAA1C,CAFF,CADF;AAMD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nconst stateMachine = {\n  initial :'initial',\n  states : { \n  initial : { on : {next : 'loadingModel'}},\n  loadingModel: { on : {next: 'awaitingUpload'}},\n  awaitingUpload:{ on : {next: 'ready'}},\n  ready : { on : {next: 'classifying'}},\n  classifying: { on : {next: 'complete'}},\n  complete : { on : {next: 'awaitingUpload'}}\n}\n}\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nfunction App() {\n  const [state,dispatch] = useReducer(reducer,stateMachine.initial);\n  return (\n    <div>\n      Dog classifier app\n      <button onClick={() => dispatch('next')}>{state}</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}