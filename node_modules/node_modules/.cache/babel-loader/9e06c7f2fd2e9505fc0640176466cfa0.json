{"ast":null,"code":"var _jsxFileName = \"F:\\\\React\\\\dog-classifier\\\\src\\\\App.js\";\nimport React, { useReducer, useState, useRef } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nconst stateMachine = {\n  initial: 'initial',\n  states: {\n    initial: {\n      on: {\n        next: 'loadingModel'\n      }\n    },\n    loadingModel: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    },\n    awaitingUpload: {\n      on: {\n        next: 'ready'\n      }\n    },\n    ready: {\n      on: {\n        next: 'classifying'\n      }\n    },\n    classifying: {\n      on: {\n        next: 'complete'\n      }\n    },\n    complete: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    }\n  }\n};\n\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, stateMachine.initial);\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageUrl] = useState(null);\n  const inputRef = useRef();\n  const imageRef = useRef();\n\n  const next = () => dispatch('next');\n\n  const loadModel = async () => {\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n  };\n\n  const handleUpload = e => {\n    const {\n      files\n    } = e.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageUrl(url);\n      next();\n    }\n  };\n\n  const identify = async () => {\n    const results = await model.classify(imageRef.current);\n  };\n\n  const buttonProps = {\n    initial: {\n      text: 'Load Model',\n      actions: loadModel\n    },\n    loadingModel: {\n      text: 'Loading Model...',\n      actions: () => {}\n    },\n    awaitingUpload: {\n      text: 'Upload Photo',\n      actions: () => inputRef.current.click()\n    },\n    ready: {\n      text: 'Identifier',\n      actions: () => {}\n    },\n    classifying: {\n      text: 'Identifying',\n      actions: () => {}\n    },\n    complete: {\n      text: 'Reset',\n      actions: () => {}\n    }\n  };\n  const {\n    showImage = false\n  } = stateMachine.states[state];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, showImage && /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"upload-preview\",\n    src: imageURL,\n    ref: imageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    capture: \"camera\",\n    onChange: handleUpload,\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: buttonProps[state].action,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \" \", buttonProps[state].text));\n}\n\nexport default App;","map":{"version":3,"sources":["F:/React/dog-classifier/src/App.js"],"names":["React","useReducer","useState","useRef","mobilenet","stateMachine","initial","states","on","next","loadingModel","awaitingUpload","ready","classifying","complete","reducer","currentState","event","App","state","dispatch","model","setModel","imageURL","setImageUrl","inputRef","imageRef","loadModel","mobilenetModel","load","handleUpload","e","files","target","length","url","URL","createObjectURL","identify","results","classify","current","buttonProps","text","actions","click","showImage","action"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,SADU;AAEnBC,EAAAA,MAAM,EAAG;AACTD,IAAAA,OAAO,EAAG;AAAEE,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAG;AAAR;AAAP,KADD;AAETC,IAAAA,YAAY,EAAE;AAAEF,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KAFL;AAGTE,IAAAA,cAAc,EAAC;AAAEH,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KAHN;AAITG,IAAAA,KAAK,EAAG;AAAEJ,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KAJC;AAKTI,IAAAA,WAAW,EAAE;AAAEL,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP,KALJ;AAMTK,IAAAA,QAAQ,EAAG;AAAEN,MAAAA,EAAE,EAAG;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAP;AANF;AAFU,CAArB;;AAWA,MAAMM,OAAO,GAAG,CAACC,YAAD,EAAeC,KAAf,KAAyBZ,YAAY,CAACE,MAAb,CAAoBS,YAApB,EAAkCR,EAAlC,CAAqCS,KAArC,KAA+CZ,YAAY,CAACC,OAArG;;AAEA,SAASY,GAAT,GAAe;AACb,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBnB,UAAU,CAACc,OAAD,EAASV,YAAY,CAACC,OAAtB,CAAnC;AACA,QAAM,CAACe,KAAD,EAAOC,QAAP,IAAmBpB,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM,CAACqB,QAAD,EAAUC,WAAV,IAAyBtB,QAAQ,CAAC,IAAD,CAAvC;AACA,QAAMuB,QAAQ,GAAGtB,MAAM,EAAvB;AACA,QAAMuB,QAAQ,GAAGvB,MAAM,EAAvB;;AAEA,QAAMM,IAAI,GAAG,MAAMW,QAAQ,CAAC,MAAD,CAA3B;;AAGA,QAAMO,SAAS,GAAG,YAAY;AAC5BlB,IAAAA,IAAI;AACJ,UAAMmB,cAAc,GAAG,MAAMxB,SAAS,CAACyB,IAAV,EAA7B;AACAP,IAAAA,QAAQ,CAACM,cAAD,CAAR;AACAnB,IAAAA,IAAI;AAEL,GAND;;AAOA,QAAMqB,YAAY,GAAGC,CAAC,IAAI;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;;AACA,QAAID,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAqB;AACnB,YAAMC,GAAG,GAAGC,GAAG,CAACC,eAAJ,CAAoBL,KAAK,CAAC,CAAD,CAAzB,CAAZ;AACAR,MAAAA,WAAW,CAACW,GAAD,CAAX;AACA1B,MAAAA,IAAI;AACL;AACF,GAPD;;AASA,QAAM6B,QAAQ,GAAG,YAAY;AAC3B,UAAMC,OAAO,GAAG,MAAMlB,KAAK,CAACmB,QAAN,CAAed,QAAQ,CAACe,OAAxB,CAAtB;AACD,GAFD;;AAGA,QAAMC,WAAW,GAAG;AAClBpC,IAAAA,OAAO,EAAG;AAAEqC,MAAAA,IAAI,EAAG,YAAT;AAAuBC,MAAAA,OAAO,EAAEjB;AAAhC,KADQ;AAElBjB,IAAAA,YAAY,EAAG;AAAEiC,MAAAA,IAAI,EAAG,kBAAT;AAA6BC,MAAAA,OAAO,EAAE,MAAM,CAAE;AAA9C,KAFG;AAGlBjC,IAAAA,cAAc,EAAG;AAAGgC,MAAAA,IAAI,EAAG,cAAV;AAA0BC,MAAAA,OAAO,EAAE,MAAMnB,QAAQ,CAACgB,OAAT,CAAiBI,KAAjB;AAAzC,KAHC;AAIlBjC,IAAAA,KAAK,EAAG;AAAG+B,MAAAA,IAAI,EAAG,YAAV;AAAwBC,MAAAA,OAAO,EAAE,MAAM,CAAE;AAAzC,KAJU;AAKlB/B,IAAAA,WAAW,EAAG;AAAG8B,MAAAA,IAAI,EAAG,aAAV;AAAyBC,MAAAA,OAAO,EAAE,MAAM,CAAE;AAA1C,KALI;AAMlB9B,IAAAA,QAAQ,EAAG;AAAG6B,MAAAA,IAAI,EAAG,OAAV;AAAmBC,MAAAA,OAAO,EAAE,MAAM,CAAE;AAApC;AANO,GAApB;AASA,QAAM;AAAEE,IAAAA,SAAS,GAAG;AAAd,MAAwBzC,YAAY,CAACE,MAAb,CAAoBY,KAApB,CAA9B;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG2B,SAAS,iBAAI;AAAK,IAAA,GAAG,EAAC,gBAAT;AAA0B,IAAA,GAAG,EAAEvB,QAA/B;AAAyC,IAAA,GAAG,EAAEG,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADhB,eAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,MAAM,EAAC,SAA1B;AAAoC,IAAA,OAAO,EAAC,QAA5C;AAAqD,IAAA,QAAQ,EAAEI,YAA/D;AAA6E,IAAA,GAAG,EAAEL,QAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAQ,IAAA,OAAO,EAAEiB,WAAW,CAACvB,KAAD,CAAX,CAAmB4B,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA8CL,WAAW,CAACvB,KAAD,CAAX,CAAmBwB,IAAjE,CAHF,CADF;AAOD;;AAED,eAAezB,GAAf","sourcesContent":["import React, { useReducer,useState, useRef } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nconst stateMachine = {\n  initial :'initial',\n  states : { \n  initial : { on : {next : 'loadingModel'}},\n  loadingModel: { on : {next: 'awaitingUpload'}},\n  awaitingUpload:{ on : {next: 'ready'}},\n  ready : { on : {next: 'classifying'}},\n  classifying: { on : {next: 'complete'}},\n  complete : { on : {next: 'awaitingUpload'}}\n}\n}\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nfunction App() {\n  const [state,dispatch] = useReducer(reducer,stateMachine.initial);\n  const [model,setModel] = useState(null);\n  const [imageURL,setImageUrl] = useState(null);\n  const inputRef = useRef();\n  const imageRef = useRef();\n\n  const next = () => dispatch('next')\n\n  \n  const loadModel = async () => {\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n\n  }\n  const handleUpload = e => {\n    const { files } = e.target;\n    if (files.length > 0){\n      const url = URL.createObjectURL(files[0]);\n      setImageUrl(url);\n      next();\n    }\n  }\n\n  const identify = async () => {\n    const results = await model.classify(imageRef.current);\n  }\n  const buttonProps = {\n    initial : { text : 'Load Model', actions: loadModel },\n    loadingModel : { text : 'Loading Model...', actions: () => {} },\n    awaitingUpload : {  text : 'Upload Photo', actions: () => inputRef.current.click()},\n    ready : {  text : 'Identifier', actions: () => {}},\n    classifying : {  text : 'Identifying', actions: () => {}},\n    complete : {  text : 'Reset', actions: () => {}}\n  }\n\n  const { showImage = false } = stateMachine.states[state];\n  return (\n    <div>\n      {showImage && <img alt=\"upload-preview\" src={imageURL} ref={imageRef} /> }\n      <input type=\"file\" accept=\"image/*\" capture=\"camera\" onChange={handleUpload} ref={inputRef} />\n      <button onClick={buttonProps[state].action}> {buttonProps[state].text}</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}